#!/bin/bash

set -eu

baseDir="$(cd "$(dirname "$(which "$0")")" && pwd)"
bhDir="$(dirname "${baseDir}")"
includeDir="${baseDir}/Include/"

source "${includeDir}/bhumanBase"

headName=""
robotVersion=""

usage() {
  echo "usage:"
  echo "${0} <ipaddress>"
  echo ""
  echo " <address> : the current dns name or ip address of the robot to install"
  echo " -h|--help : displays this help"
  exit 1
}

parseOptions() {
  # -h or --help => print help
  if [ $# -ne 1 ] ; then
    if [ $# -gt 1 ] ; then
      error "Too many arguments!"
    fi
    usage
  fi
  robotIp=${1}

  # try to ping robot
  if [ `ping ${pingoptions} ${robotIp} > /dev/null && echo 1 || echo 0` == "0" ]; then
    error "robot not reachable at ${robotIp}"
    usage
  fi
}

getNames() {
  # Test if robots.cfg exists
  if [ ! -f "${robotsFile}" ]; then
    fatal "The file ${robotsFile} (containing the robot names and ids) does not exist!"
  fi

  # get headId
  local headId
  headId=$(ssh -i "${privateKey}" ${sshOptions} nao@${robotIp} "cat /sys/qi/head_id 2>/dev/null || true")
  if [ -z ${headId} ]; then
    fatal "Failed reading the headId!"
  fi

  #find robotName
  grepForHeadId=$(grep ${headId} "${robotsFile}")
  numOfMatchingHeadIds=$(echo "${grepForHeadId}" | wc -l)
  if [ ${numOfMatchingHeadIds} -eq 0 ]; then
    fatal "The headId \"${headId}\" is missing (in ${robotsFile})!"
  elif [ ${numOfMatchingHeadIds} -gt 1 ]; then
    fatal "${robotsFile} contains the headId \"${headId}\" more than once!"
  else
    robotName=$(echo "${grepForHeadId}" | sed "s%.*name[	 ]*=[	 ]*\"\([^\"]*\).*%\1%")
    if [ ${robotName} == "" ]; then
      fatal "RobotName is empty"
    fi
  fi

  robotDir="${baseDir}/Robots/${robotName}"

  # does the robot exist?
  if [ ! -d "${robotDir}" ]; then
    fatal "Robot \"${robotName}\" does not exist"
  fi

  echo ""
  echo "using parameters"
  echo "  robotName: ${robotName}"
  echo "  address:   ${robotIp}"
  echo ""
}

copyFiles() {
  copyTo="/tmp/NaoInstall/${robotName}"
  message "Copying files to ${copyTo}"
  if [[ $(uname) == "*CYGWIN*" ]] ; then
    chmod -R 755 "${fileDir}"
    setfacl -s d:u::rwx,d:g::r-x,d:o:r-x "${fileDir}" #due to windows 8
    chmod -R 755 "${robotDir}"
    setfacl -s d:u::rwx,d:g::r-x,d:o:r-x "${robotDir}" #due to windows 8
    chmod -R 755 "${baseDir}/Network/Profiles"
    setfacl -s d:u::rwx,d:g::r-x,d:o:r-x "${baseDir}/Network/Profiles" #due to windows 8
  fi

  ssh -i "${privateKey}" ${sshOptions} nao@${robotIp} "rm -Rf ${copyTo}" || fatal "Can't remove '${copyTo}' on NAO"
  ssh -i "${privateKey}" ${sshOptions} nao@${robotIp} "mkdir -p ${copyTo}" || fatal "Can't create '${copyTo}' on NAO"
  rsync ${rsyncOptions} -e "${sshCommand}" "${fileDir}"/* nao@${robotIp}:${copyTo} || fatal "Can't copy to '${copyTo}' on NAO"
  rsync ${rsyncOptions} -e "${sshCommand}" "${robotDir}"/* nao@${robotIp}:${copyTo}/Robot/ || fatal "Can't copy to '${copyTo}/Robot' on NAO"
  rsync ${rsyncOptions} -e "${sshCommand}" "${baseDir}/Network/Profiles" nao@${robotIp}:${copyTo}/Robot/ || fatal "Can't copy to '${copyTo}/Robot' on NAO"
  sysrootDir="/tmp/bhSysroot1337"
  rm -Rf "${sysrootDir}"
  mkdir -p "${sysrootDir}/lib"
  cp "${bhDir}/Util/Buildchain/gcc/lib/ld-2.13.so" "${sysrootDir}/lib/ld-linux.so.2"
  cp "${bhDir}/Util/Buildchain/gcc/lib/libc-2.13.so" "${sysrootDir}/lib/libc.so.6"
  cp "${bhDir}/Util/Buildchain/gcc/lib/libdl-2.13.so" "${sysrootDir}/lib/libdl.so.2"
  cp "${bhDir}/Util/Buildchain/gcc/lib/libm-2.13.so" "${sysrootDir}/lib/libm.so.6"
  # cp "${bhDir}/Util/Buildchain/gcc/lib/libmvec-2.13.so" "${sysrootDir}/lib/libmvec.so.1"
  cp "${bhDir}/Util/Buildchain/gcc/lib/libpthread-2.13.so" "${sysrootDir}/lib/libpthread.so.0"
  cp "${bhDir}/Util/Buildchain/gcc/lib/librt-2.13.so" "${sysrootDir}/lib/librt.so.1"
  cp "${bhDir}/Util/Buildchain/gcc/lib/libstdc++.so.6.0.21" "${sysrootDir}/lib/libstdc++.so.6"
  cp "${bhDir}/Util/Buildchain/gcc/lib/libgcc_s.so.1" "${sysrootDir}/lib/libgcc_s.so.1"
  cp "${bhDir}/Util/Buildchain/gcc/lib/libasound.so" "${sysrootDir}/lib/libasound.so.2"

  rsync ${rsyncOptions} -e "${sshCommand}" "${sysrootDir}"/* nao@${robotIp}:${copyTo}/sysroot/ || fatal "Can't copy to '${copyTo}' on NAO"
}

runInstallation() {
  message "launching install process"
  ssh -i "${privateKey}" ${sshOptions} nao@${robotIp} "chmod 755 ${copyTo}/install && bash -l -c '${copyTo}/install'" || fatal "Installation failed"
}

###############################################################################
##                                                                           ##
##  MAIN                                                                     ##
##                                                                           ##
###############################################################################

checkApp "rsync"
parseOptions "$@"
copyKey ${robotIp}
getNames
copyFiles
runInstallation
